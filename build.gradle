// Configure version based on Git tags
apply plugin: 'pl.allegro.tech.build.axion-release'
scmVersion {
    releaseOnlyOnReleaseBranches = true
    releaseBranchNames = ['main']
    unshallowRepoOnCI.set(true)
    versionCreator('simple')
    repository {
        remote.set('origin')
    }
    tag {
        prefix.set('')
    }
}

allprojects {
    // Apply common project setup
    apply from: "${project.rootDir}/project.gradle"
}

// Uncomment the following to configure files to be encrypted/decrypted
// Each file must be explicitly added to .gitignore otherwise git commit will fail
// When using encryption the the GFE_PASSWORD environment variable must be set or the build will fail
// use ./gradlew encryptFiles to encrypt files

//apply plugin: "com.cherryperry.gradle-file-encrypt"
//gradleFileEncrypt {
//    // files to encrypt
//    plainFiles.from("deployment/manager/fcm.json")
//    // (optional) setup file mapping to store all encrypted files in one place for example
//    //mapping = [ 'deployment/mySensitiveFile' : 'secrets/mySensitiveFile' ]
//    // Use custom password provider as standard env mechanism doesn't seem to work
//    passwordProvider = {
//        def password = System.env.GFE_PASSWORD
//        if (!password) {
//            throw new IllegalStateException("GFE_PASSWORD environment variable must be set!")
//        }
//        return password.toCharArray()
//    }
//}
//tasks.register('checkFilesGitIgnoredNew') {
//    doLast {
//        // The provided checkFilesGitIgnored task doesn't work on Windows so here's one that does
//        def plainFiles = project.getProperties().get("gradleFileEncrypt").plainFiles
//        plainFiles.each { plainFile ->
//            def args = []
//            if (org.apache.tools.ant.taskdefs.condition.Os.isFamily(org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS)) {
//                args.add("cmd")
//                args.add("/c")
//            }
//            args.add("git")
//            args.add("check-ignore")
//            args.add("-q")
//            args.add(plainFile) // Assuming plainFile is a single file path
//
//            def result = project.exec {
//                commandLine args
//                ignoreExitValue = true // Allow the build to continue so we can check the exit value
//            }
//
//            if (result.exitValue != 0) {
//                throw new GradleException("Command execution failed for file ${plainFile} with exit code: ${result.exitValue}")
//            }
//        }
//    }
//}
